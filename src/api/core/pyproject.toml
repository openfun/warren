#
# Warren package
#
[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "warren-api"
description = "The visualization platform for your learning analytics (API backend)"
readme = "README.md"
authors = [
  { name="Open FUN (France Universite Numerique)", email="fun.dev@fun-mooc.fr" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.9"
license = {file = "LICENSE.md"}
keywords = ["Analytics", "xAPI", "LRS", "LTI"]
dependencies = [
    "alembic==1.13.1",
    "arrow==1.3.0",
    "click==8.1.7",
    "django-lti-toolbox==1.3.0",
    "fastapi==0.110.2",
    "importlib-metadata==7.1.0",
    "pandas==2.2.2",
    "psycopg2-binary==2.9.9",
    "pydantic[dotenv]==1.10.13",
    "python-jose[cryptography]==3.3.0",
    "rfc3987==1.3.8",
    "sentry-sdk[fastapi]==2.0.1",
    "sqlmodel==0.0.16",
    "uvicorn[standard]==0.29.0",
    "ralph-malph[backend-lrs]==4.2.0"
]
dynamic = ["version"]

[project.urls]
"Homepage" = "https://github.com/openfun/warren"
"Bug Tracker" = "https://github.com/openfun/warren/issues"

[project.optional-dependencies]
dev = [
    "black==24.4.2",
    "build==1.2.1",
    "freezegun==1.5.0",
    "httpx==0.24.1",
    "ipdb==0.13.13",
    "ipython==8.18.1",
    "polyfactory==2.15.0",
    "pytest==7.4.4",
    "pytest-cov==5.0.0",
    "pytest-httpx==0.22.0",
    "ruff==0.4.2",
    "mypy==1.10.0",
    "pandas-stubs==2.2.1.240316",
    "types-python-jose==3.3.4.20240106"
]
ci = [
    "twine==5.0.0",
]

[project.scripts]
warren = "warren.__main__:cli.cli"

[tool.setuptools.dynamic]
version = { attr = "warren.__version__" }

[tool.setuptools.package-data]
warren = ["alembic.ini"]

[tool.coverage.run]
omit = [
    "*/tests/*",
]

# Third party packages configuration
[tool.pytest.ini_options]
addopts = "-v --cov-config=core/pyproject.toml --cov-report term-missing --cov=core --cov=plugins"
python_files = [
    "test_*.py",
    "tests.py",
]
testpaths = [
    "tests",
]

[tool.ruff]
exclude = [
    "core/warren/migrations/versions",
]
# Assume Python 3.9.
target-version = "py39"

[tool.ruff.lint]
select = [
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "D",  # pydocstyle
    "E",  # pycodestyle error
    "F",  # Pyflakes
    "I",  # Isort
    "ISC",  # flake8-implicit-str-concat
    "PLC",  # Pylint Convention
    "PLE",  # Pylint Error
    "PLR",  # Pylint Refactor
    "PLW",  # Pylint Warning
    "RUF100",  # Ruff unused-noqa
    "S",  # flake8-bandit
    "T20", # flake8-print
    "W",  # pycodestyle warning
]

[tool.ruff.lint.per-file-ignores]
"*/tests/*" = [
    "S101",
    "PLR0913", # Too many arguments in function
    "PLR2004",  # Pylint magic-value-comparison
]

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings.
convention = "google"

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends", "fastapi.params.Depends", "fastapi.Query", "fastapi.params.Query"]

[tool.mypy]
plugins = "pydantic.mypy"
files = "./**/*.py"
exclude = ["/tests/"]

[[tool.mypy.overrides]]
module = [
    "rfc3987.*",
    "ralph.*",  # FIXME - remove when mypy is fixed on ralph
    "lti_toolbox.*",
]
ignore_missing_imports = true
