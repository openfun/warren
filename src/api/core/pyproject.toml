#
# Warren package
#
[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "warren-api"
description = "The visualization platform for your learning analytics (API backend)"
readme = "README.md"
authors = [
  { name="Open FUN (France Universite Numerique)", email="fun.dev@fun-mooc.fr" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
requires-python = ">=3.7"
license = {file = "LICENSE.md"}
keywords = ["Analytics", "xAPI", "LRS", "LTI"]
dependencies = [
    "arrow==1.2.2",
    "elasticsearch[async]==8.6.2",
    "fastapi==0.95.2",
    "importlib-metadata==6.6.0",
    "pandas==2.0.2",
    "pydantic[dotenv]==1.10.8",
    "rfc3987==1.3.8",
    "sentry-sdk[fastapi]==1.15.0",
    "uvicorn[standard]==0.20.0",
    "ralph-malph[backend-lrs]==3.7.0"
]
dynamic = ["version"]

[project.urls]
"Homepage" = "https://github.com/openfun/warren"
"Bug Tracker" = "https://github.com/openfun/warren/issues"

[project.optional-dependencies]
dev = [
    "black==23.1.0",
    "build==0.10.0",
    "factory-boy==3.2.1",
    "Faker==17.0.0",
    "httpx==0.24.1",
    "ipdb==0.13.11",
    "ipython==8.10.0",
    "pytest==7.2.1",
    "pytest-cov==4.0.0",
    "pytest-httpx==0.22.0",
    "ruff==0.0.272",
    "mypy==1.4.1",
]
ci = [
    "twine==4.0.2",
]

[tool.setuptools.dynamic]
version = { attr = "warren.__version__" }


# Third party packages configuration
[tool.pytest.ini_options]
addopts = "-v --cov-report term-missing --cov=core --cov=plugins"
python_files = [
    "test_*.py",
    "tests.py",
]
testpaths = [
    "tests",
]

[tool.ruff]
select = [
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "D",  # pydocstyle
    "E",  # pycodestyle error
    "F",  # Pyflakes
    "I",  # Isort
    "ISC",  # flake8-implicit-str-concat
    "PLC",  # Pylint Convention
    "PLE",  # Pylint Error
    "PLR",  # Pylint Refactor
    "PLW",  # Pylint Warning
    "RUF100",  # Ruff unused-noqa
    "S",  # flake8-bandit
    "W",  # pycodestyle warning
]

# Assume Python 3.8.
target-version = "py38"

[tool.ruff.per-file-ignores]
"*/tests/*" = [
    "S101",
    "PLR2004",  # Pylint magic-value-comparison
]

[tool.ruff.pydocstyle]
# Use Google-style docstrings.
convention = "google"

[tool.mypy]
mypy_path = "core,plugins/video"
explicit_package_bases = "true"
#plugins = [
#  "pydantic.mypy"
#]

[[tool.mypy.overrides]]
module = 'rfc3987.*'
ignore_missing_imports = "true"


[[tool.mypy.overrides]]
module = 'ralph.*'
ignore_missing_imports = "true"
