@use "sass:math";

// FIXME - Factorize with cunningham?
@function strip-unit($number) {
  // Divide $number by its own unit to get a unitless number.
  // According to math.div documentation, "Any units shared by both numbers will be canceled out."
  // while different unit between numerator and denominator would be kept.
  // More to read here https://sass-lang.com/documentation/modules/math#div.
  // i.e. 16px / 1px = 16
  @if type-of($number) == 'number' and not unitless($number) {
    @return math.div($number, ($number * 0 + 1));
  }
  @return $number;
}

@function px-to-rem($size, $base-font-size:16px) {
  @return math.div(strip-unit($size), strip-unit($base-font-size)) * 1rem;
}

.c__header {
  // FIXME - Centralize and reorganize variables for better maintainability.
  $border-color: #dadce0;
  $body-padding: 8px;
  $separator-margin: 1.5rem;

  height: 4rem;
  border-bottom: px-to-rem(1px) solid $border-color;
  background-color: white;

  padding: 0 0.5rem;
  margin: auto $body-padding*-1;

  display: flex;
  align-items: center;

  z-index: 2;
  position: relative;

  &__logo-title {
    width: calc(12rem + $separator-margin);
    display: flex;
    justify-content: space-evenly;
    align-items: center;

    margin-right: $separator-margin;

    h1 {
      font-size: 2rem;
      font-weight: 400;
      // FIXME - Remove dependencies on Cunningham variables for improved code modularity.
      color: var(--c--theme--colors--secondary-text);
    }
    svg {
      height: 2.5rem;
    }

    &::after {
      content: '';
      height: 2rem;
      width: px-to-rem(2);
      background-color: $border-color;
      margin-left: $separator-margin;
    }
  }
}
