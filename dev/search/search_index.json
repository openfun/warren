{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Warren","text":"<p>\ud83d\udcca A framework for your learning analytics (expect some xAPI \u2764\ufe0f)</p> <p> </p> <p>Warren is a framework for your learning analytics. Its key features are:</p> <ol> <li>a simple Python interface to define indicators,</li> <li>cacheable indicators calculation,</li> <li>pluggable execution engines,</li> <li>calculated indicators exposed via an HTTP API,</li> <li>LRS as a primary data    source,</li> <li>high extensibility thanks to a plugin-architecture,</li> <li>LTI    dashboards integration.</li> </ol> <p>Warren also provides:</p> <ol> <li>a light-weight implementation of ADLNet\u2019s    Experience Index (aka XI), a    core-component of the recommended    Total Learning Architecture,</li> <li>extensible indexers for popular LMSes (Moodle, OpenEdx) to feed the XI.</li> </ol> <p>And finally, Warren also provides web component to build reactive, beautiful dashboards .</p> <p></p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#unreleased","title":"Unreleased","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>Implement base view filters: date/times</li> <li>Implement base plugin architecture</li> <li>Bootstrap base backend boilerplate</li> <li>Implement video views endpoint</li> <li>Bootstrap base frontend boilerplate using turborepo</li> <li>Run ralph in the docker compose</li> <li>Add the LRS backend</li> <li>Switch the video view plugin from an elasticsearch to a LRS backend</li> <li>Remove the elasticsearch backend</li> <li>Add the LTI django application</li> <li>Rename the API directory to a more descriptive name.</li> <li>Add a select and date range picker to the web dashboard.</li> <li>Implement video downloads endpoint</li> <li>Rename video_uuid to follow xAPI semantic</li> <li>Use concise names in indicator and models</li> <li>Refactor the LRS client to be asynchronous</li> <li>Fix count of 0 in all video endpoints</li> <li>Require Python minimum version of 3.9</li> <li>Encapsulate statements pre-processing in a Mixin class</li> <li>Factorize Video indicators</li> </ul>"},{"location":"LICENSE/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2023-present France Universit\u00e9 Num\u00e9rique</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"contribute/","title":"Contributing to Warren","text":"<p>Thank you for considering contributing to Warren! We appreciate your interest and support. This documentation provides guidelines on how to contribute effectively to our project.</p>"},{"location":"contribute/#issues","title":"Issues","text":"<p>Issues are a valuable way to contribute to Warren. They can include bug reports, feature requests, and general questions or discussions. When creating or interacting with issues, please keep the following in mind:</p>"},{"location":"contribute/#1_search_for_existing_issues","title":"1. Search for existing issues","text":"<p>Before creating a new issue, search the existing issues to see if your concern has already been raised. If you find a related issue, you can add your input or follow the discussion. Feel free to engage in discussions, offer help, or provide feedback on existing issues. Your input is valuable in shaping the project\u2019s future.</p>"},{"location":"contribute/#2_creating_a_new_issue","title":"2. Creating a new issue","text":"<p>Use the provided issue template that fits the best to your concern. Provide as much information as possible when writing your issue. Your issue will be reviewed by a project maintainer and you may be offered to open a PR if you want to contribute to the code. If not, and if your issue is relevant, a contributor will apply the changes to the project. The issue will then be automatically closed when the PR is merged.</p> <p>Issues will be closed by project maintainers if they are deemed invalid. You can always reopen an issue if you believe it hasn\u2019t been adequately addressed.</p>"},{"location":"contribute/#3_code_of_conduct_in_discussion","title":"3. Code of conduct in discussion","text":"<ul> <li>Be respectful and considerate when participating in discussions.</li> <li>Avoid using offensive language, and maintain a positive and collaborative   tone.</li> <li>Stay on topic and avoid derailing discussions.</li> </ul>"},{"location":"contribute/#discussions","title":"Discussions","text":"<p>Discussions in the Warren repository are a place for open-ended conversations, questions, and general community interactions. Here\u2019s how to effectively use discussions:</p>"},{"location":"contribute/#1_creating_a_discussion","title":"1. Creating a discussion","text":"<ul> <li>Use a clear and concise title that summarizes the topic.</li> <li>In the description, provide context and details regarding the discussion.</li> <li>Use labels to categorize the discussion (e.g., \u201cquestion,\u201d \u201cgeneral   discussion,\u201d \u201cannouncements,\u201d etc.).</li> </ul>"},{"location":"contribute/#2_participating_in_discussions","title":"2. Participating in discussions","text":"<ul> <li>Engage in conversations respectfully, respecting others\u2019 opinions.</li> <li>Avoid spamming or making off-topic comments.</li> <li>Help answer questions when you can.</li> </ul>"},{"location":"contribute/#pull_requests_pr","title":"Pull Requests (PR)","text":"<p>Contributing to Warren through pull requests is a powerful way to advance the project. If you want to make changes or add new features, please follow these steps to submit a PR:</p>"},{"location":"contribute/#1_fork_the_repository","title":"1. Fork the repository","text":"<p>Begin by forking Warren project\u2019s repository.</p>"},{"location":"contribute/#2_clone_the_fork","title":"2. Clone the fork","text":"<p>Clone the forked repository to your local machine and change the directory to the project folder using the following commands (replace <code>&lt;your_fork&gt;</code> with your GitHub username):</p> <pre><code>git clone https://github.com/&lt;your_fork&gt;/warren.git\ncd warren\n</code></pre>"},{"location":"contribute/#3_create_a_new_branch","title":"3. Create a new branch","text":"<p>Create a new branch for your changes, ideally with a descriptive name:</p> <pre><code>git checkout -b your-new-feature\n</code></pre>"},{"location":"contribute/#4_make_changes","title":"4. Make changes","text":"<p>Implement the changes or additions to the code, ensuring it follows OpenFUN coding and documentation standards.</p> <p>For comprehensive guidance on starting your development journey with Warren and preparing your pull request, please refer to our dedicated tutorials.</p> <p>When committing your changes, please adhere to OpenFUN commit practices. Follow the low granularity commit splitting approach and use commit messages based on the Angular commit message guidelines.</p>"},{"location":"contribute/#5_push_changes","title":"5. Push changes","text":"<p>Push your branch to your GitHub repository:</p> <pre><code>git push origin feature/your-new-feature\n</code></pre>"},{"location":"contribute/#6_create_a_pull_request","title":"6. Create a pull request","text":"<p>To initiate a Pull Request (PR), head to Warren project\u2019s GitHub repository and click on New Pull Request.</p> <p>Set your branch as the source and Warren project\u2019s <code>main</code> branch as the target.</p> <p>Provide a clear title for your PR and make use of the provided PR body template to document the changes made by your PR. This helps streamline the review process and maintain a well-documented project history.</p>"},{"location":"contribute/#7_review_and_discussion","title":"7. Review and discussion","text":"<p>Warren project maintainers will review your PR. Be prepared to make necessary changes or address any feedback. Patience during this process is appreciated.</p>"},{"location":"contribute/#8_merge","title":"8. Merge","text":"<p>Once your PR is approved, Warren maintainers will merge your changes into the main project. Congratulations, you\u2019ve successfully contributed to Warren! \ud83c\udf89</p>"},{"location":"contribute/#releases","title":"Releases","text":"<p>The Warren project has multiple services maintained in a single Git repository (aka a monorepo): each service has its own life cycle with its own releases.</p> <p>We use Git tags to trigger CI builds of the Warren\u2019s artifacts (PyPI/NPM packages and Docker images). To make a new release, depending on the service you are releasing, you need to apply the following Git tag pattern conventions:</p> Type Service Git tag pattern Example Back-end API (core) <code>v[0-9]+.[0-9]+.[0-9]+-api</code> <code>v2.0.1-api</code> API (plugin) <code>v[0-9]+.[0-9]+.[0-9]+-api-&lt;plugin&gt;</code> <code>v0.6.22-api-video</code> APP <code>v[0-9]+.[0-9]+.[0-9]+-app</code> <code>v1.3.6-app</code> Front-end core <code>v[0-9]+.[0-9]+.[0-9]+-ui</code> <code>v5.1.0-ui</code> plugin <code>v[0-9]+.[0-9]+.[0-9]+-ui-&lt;plugin&gt;</code> <code>v3.22.5-ui-video</code> Distribution * <code>v[0-9]+.[0-9]+.[0-9]+</code> <code>v2.0.0</code> Helm * <code>v[0-9]+.[0-9]+.[0-9]+-helm</code> <code>v1.2.1-helm</code> <p>About Warren distributions</p> <p>A Warren distribution is considered as a \u201cmeta\u201d package corresponding to a consistent combination of services releases that are known to work well together. This pattern will be used to tag Docker images and the documentation.</p>"},{"location":"contribute/#working_on_a_new_release","title":"Working on a new release","text":"<p>This project follows FUN\u2019s standard process to release a new version. We invite you to read our handbook that describes it into details.</p> <p>To release back-end python packages or the related Docker images, this process can be applied by-the-book. However, front-end packages use changeset to manage their <code>CHANGELOG</code>, version and publication. We will describe how to use it below.</p>"},{"location":"contribute/#using_changeset_for_front-end_packages","title":"Using <code>changeset</code> for front-end packages","text":"<p>When working a front-end package, if your changes are worth to be mentioned in the package <code>CHANGELOG</code>, we invite you to log them using the <code>bin/changeset add</code> command.</p> <p>When you are ready to release a package, use the <code>bin/changeset version</code> command to bump the package version and update the <code>CHANGELOG</code> accordingly. The CI will be in charge to publish them afterwards upon <code>main</code> branch tagging.</p>"},{"location":"plugins/","title":"Plugins ecosystem","text":"<p>Warren is extensible by design using a plugins architecture. Warren plugins are distributed as Python packages for the API service and indicators, or as NPM packages for UI components. This page intends to list known available plugins for Warren (feel free to open a pull request to add your plugin in this list!).</p>"},{"location":"plugins/#plugins_registry","title":"Plugins registry","text":""},{"location":"plugins/#indicators_api_service","title":"Indicators (API service)","text":"<ul> <li>Warren video  : a series of indicators related to Video activity</li> </ul> <p> \u2015 offical plugins (maintained by Warren\u2019s core team)</p>"},{"location":"plugins/#dataviz_front-end_app_service","title":"Dataviz (Front-end / APP service)","text":"<ul> <li>Warren video  : a series of ReactJS component to explore Video activity in your   Dashboards.</li> </ul> <p> \u2015 offical plugins (maintained by Warren\u2019s core team)</p>"},{"location":"plugins/#create_your_own_plugin_for_warren","title":"Create your own plugin for Warren","text":""},{"location":"plugins/#api","title":"API","text":"<p>To make your plugin auto-magically discoverable by Warren, you should declare entry points in your module\u2019s package. Two groups of entry points can be declared depending on what your plugin extends:</p> <ul> <li><code>warren.routers</code>: add new routers to the core API</li> <li><code>warren.indicators</code>: allow to compute indicators from the CLI (see   <code>warren indicator</code> command documentation)</li> </ul> <p>As an example, the Warren Video plugin implements such entry points in its package definition:</p> <pre><code># pyproject.toml\n\n[project.entry-points.\"warren.routers\"]\nvideo = \"warren_video.api:router\"\n\n[project.entry-points.\"warren.indicators\"]\ndaily_views = \"warren_video.indicators:DailyViews\"\ndaily_unique_views = \"warren_video.indicators:DailyUniqueViews\"\ndaily_completed_views = \"warren_video.indicators:DailyCompletedViews\"\ndaily_unique_completed_views = \"warren_video.indicators:DailyUniqueCompletedViews\"\ndaily_downloads = \"warren_video.indicators:DailyDownloads\"\ndaily_unique_downloads = \"warren_video.indicators:DailyUniqueDownloads\"\n</code></pre> <p>You can check that your indicators are properly registered using the following command:</p> <pre><code>warren indicator list\n</code></pre> <p>If only the <code>warren_video</code> plugin is installed, the command output looks like:</p> <pre><code>warren_video.indicators:DailyCompletedViews\nwarren_video.indicators:DailyDownloads\nwarren_video.indicators:DailyUniqueCompletedViews\nwarren_video.indicators:DailyUniqueDownloads\nwarren_video.indicators:DailyUniqueViews\nwarren_video.indicators:DailyViews\n</code></pre>"},{"location":"plugins/#front-end","title":"Front-end","text":"<p>TODO</p>"}]}