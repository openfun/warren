# Configuration file anchors
generate-version-file: &generate-version-file
  run:
    name: Create a version.json
    command: |
      # Create a version.json Ã -la-mozilla
      # https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
      printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
        "$CIRCLE_SHA1" \
        "$CIRCLE_TAG" \
        "$CIRCLE_PROJECT_USERNAME" \
        "$CIRCLE_PROJECT_REPONAME" \
        "$CIRCLE_BUILD_URL" > version.json

docker-login: &docker-login
  # Login to DockerHub
  #
  # Nota bene: you'll need to define the following secrets environment vars
  # in CircleCI interface:
  #
  #   - DOCKER_HUB_USER
  #   - DOCKER_HUB_PASSWORD
  run:
    name: Login to DockerHub
    command: >
      test -n "$DOCKER_HUB_USER" &&
        echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USER" --password-stdin ||
        echo "Docker Hub anonymous mode"

version: 2.1
jobs:
  # Git jobs
  # Check that the git history is clean and complies with our expectations
  lint-git:
    docker:
      - image: cimg/python:3.12
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - run:
          name: Check absence of fixup commits
          command: |
            ! git log --pretty=format:%s | grep 'fixup!'
      - run:
          name: Install gitlint
          command: |
            pip install --user gitlint requests
      - run:
          name: lint commit messages added to main
          command: |
            ~/.local/bin/gitlint --commits origin/main..HEAD

  # Check that the CHANGELOG has been updated in the current branch
  check-changelog:
    docker:
      - image: cimg/base:current
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - run:
          name: Check that the CHANGELOG has been modified in the current branch
          command: |
            git whatchanged --name-only --pretty="" origin..HEAD | grep CHANGELOG

  # Check that the CHANGELOG max line length does not exceed 80 characters
  lint-changelog:
    docker:
      - image: debian:stretch
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - run:
          name: Check CHANGELOG max line length
          command: |
            # Get the longuest line width (ignoring release links)
            test $(cat CHANGELOG.md | grep -Ev "^\[.*\]: https://github.com/openfun" | wc -L) -le 80

  # Check that renovate configuration file is valid
  check-renovate-configuration:
    docker:
      - image: renovate/renovate
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/fun
    steps:
      - checkout
      - run:
          name: Run renovate-config-validator command
          command: renovate-config-validator

  # ---- Docker jobs ----
  # Build Docker images ready for production
  build-docker-api:
    docker:
      - image: cimg/base:current
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      # Checkout repository sources
      - checkout
      # Generate a version.json file describing app release & login to DockerHub
      - *generate-version-file
      - *docker-login
      # Activate docker-in-docker (with layers caching enabled)
      - setup_remote_docker:
          docker_layer_caching: true
      # Each image is tagged with the current git commit sha1 to avoid
      # collisions in parallel builds.
      - run:
          name: Build core production image
          command: |
            WARREN_API_IMAGE_BUILD_TARGET=production-core \
            WARREN_API_IMAGE_TAG=api-core-${CIRCLE_SHA1} \
              make build-docker-api
      - run:
          name: Build full production image
          command: |
            WARREN_API_IMAGE_BUILD_TARGET=production-full \
            WARREN_API_IMAGE_TAG=api-full-${CIRCLE_SHA1} \
              make build-docker-api
      - run:
          name: Check built image availability
          command: docker images "warren:api-*"

  build-docker-app:
    machine:
      image: ubuntu-2204:2023.07.2
      docker_layer_caching: true
    working_directory: ~/fun
    steps:
      # Checkout repository sources
      - checkout
      # Generate a version.json file describing app release & login to DockerHub
      - *generate-version-file
      - *docker-login
      # Each image is tagged with the current git commit sha1 to avoid
      # collisions in parallel builds.
      - run:
          name: Build production image
          command: |
            WARREN_APP_IMAGE_BUILD_TARGET=production \
            WARREN_APP_IMAGE_TAG=app-${CIRCLE_SHA1} \
            WARREN_FRONTEND_IMAGE_BUILD_TARGET=production \
              make build-docker-app
      - run:
          name: Check built image availability
          command: docker images "warren:app-*"

  # ---- API jobs ----
  # Build API development environment
  build-api:
    parameters:
      python-image:
        type: string
    docker:
      - image: cimg/<< parameters.python-image >>
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-api-dependencies-<< parameters.python-image >>-{{ .Revision }}
      - run:
          name: Install development dependencies
          command: |
            pip install --user ./core[dev];
            for plugin in ./plugins/*; do \
              pip install --user "${plugin}[dev]"; \
            done
          working_directory: src/api
      - save_cache:
          paths:
            - ~/.local
          key: v1-api-dependencies-<< parameters.python-image >>-{{ .Revision }}

  lint-api:
    docker:
      - image: cimg/python:3.12
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-api-dependencies-python:3.12-{{ .Revision }}
      - run:
          name: Lint code with black
          command: ~/.local/bin/black --check --config core/pyproject.toml core plugins
          working_directory: src/api
      - run:
          name: Lint code with ruff
          command: ~/.local/bin/ruff --config core/pyproject.toml core plugins
          working_directory: src/api
      - run:
          name: Lint code with mypy
          command: ~/.local/bin/mypy --config-file core/pyproject.toml core plugins
          working_directory: src/api

  test-api:
    parameters:
      python-image:
        type: string
    docker:
      - image: cimg/<< parameters.python-image >>
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
        environment:
          WARREN_API_DB_HOST: localhost
          # Those are required but not used while testing as we mock all LRS requests
          WARREN_LRS_HOSTS: http://lrs.example.org:8200
          WARREN_LRS_AUTH_BASIC_USERNAME: john_useless
          WARREN_LRS_AUTH_BASIC_PASSWORD: fake-news!
          WARREN_APP_SIGNING_KEY: your-very-secret-key
          WARREN_APP_SIGNING_ALGORITHM: HS256
      - image: cimg/postgres:12.14
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASS
        environment:
          POSTGRES_DB: warren-api
          POSTGRES_USER: fun
          POSTGRES_PASSWORD: pass
    working_directory: ~/fun
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-api-dependencies-<< parameters.python-image >>-{{ .Revision }}
      - run: sudo apt-get update
      - run: sudo apt-get install postgresql-client
      - run: whoami
      - run: |
          psql \
          -d "postgresql://fun@localhost/postgres" \
          -c "create database \"test-warren-api\";"
      - run:
          name: Run tests
          command: ~/.local/bin/pytest -c core/pyproject.toml
          working_directory: src/api

  # ---- App jobs ----
  # Build app development environment

  build-app:
    parameters:
      python-image:
        type: string
    docker:
      - image: cimg/<< parameters.python-image >>
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-app-dependencies-<< parameters.python-image >>-{{ .Revision }}
      - run:
          name: Install development dependencies
          command: pip install --user .[dev];
          working_directory: src/app
      - save_cache:
            paths:
              - ~/.local
            key: v1-app-dependencies-<< parameters.python-image >>-{{ .Revision }}

  lint-app:
    docker:
      - image: cimg/python:3.12
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-app-dependencies-python:3.12-{{ .Revision }}
      - run:
          name: Lint code with black
          command: ~/.local/bin/black --check --config ./pyproject.toml apps warren manage.py
          working_directory: src/app
      - run:
          name: Lint code with ruff
          command: ~/.local/bin/ruff --config ./pyproject.toml apps warren manage.py
          working_directory: src/app

  test-app:
    parameters:
      python-image:
        type: string
    docker:
      - image: cimg/<< parameters.python-image >>
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
        environment:
          DJANGO_SETTINGS_MODULE: warren.settings
          DJANGO_CONFIGURATION: Test
          WARREN_APP_SECRET_KEY: ThisIsAnExampleKeyForTestPurposeOnly
          WARREN_APP_DB_HOST: localhost
          WARREN_APP_SIGNING_KEY: your-very-secret-key
          WARREN_APP_SIGNING_ALGORITHM: HS256
      - image: cimg/postgres:12.14
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASS
        environment:
          POSTGRES_DB: warren-app
          POSTGRES_USER: fun
          POSTGRES_PASSWORD: pass
    working_directory: ~/fun
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-app-dependencies-<< parameters.python-image >>-{{ .Revision }}
      - run:
          name: Run tests
          command: |
            dockerize \
              -wait tcp://localhost:5432 \
              -timeout 60s \
                ~/.local/bin/pytest -c ./pyproject.toml
          working_directory: src/app

  # ---- Frontend jobs ----
  lint-frontend:
    docker:
      - image: cimg/node:21.5.0
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - run:
          name: Install development dependencies
          command: yarn install
          working_directory: src/frontend
      - run:
          name: Lint code using turbo utility
          command: yarn lint
          working_directory: src/frontend
      - run:
          name: Check formatting using prettier
          command: yarn run prettier -c "**/*.{ts,tsx,md}"
          working_directory: src/frontend

  build-frontend:
    docker:
      - image: cimg/node:21.5.0
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - run:
          name: Install development dependencies
          command: yarn install
          working_directory: src/frontend
      - run:
          name: Build project using turbo utility
          command: yarn build
          working_directory: src/frontend
      - persist_to_workspace:
          root: ~/fun
          paths:
            - src/frontend/packages/*/dist

  # ---- Documentation jobs ----
  build-docs:
    docker:
      - image: cimg/python:3.12
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-docs-dependencies-python:3.12-{{ .Revision }}
      - run:
          name: Install development dependencies
          command: pip install --user .
          working_directory: docs
      - save_cache:
            paths:
              - ~/.local
            key: v1-docs-dependencies-python:3.12-{{ .Revision }}
      - run:
          name: Build documentation
          command: ~/.local/bin/mkdocs build

  # Deploy the docs website to GitHub pages.
  deploy-docs:
    docker:
      - image: cimg/python:3.12
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/fun
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-docs-dependencies-python:3.12-{{ .Revision }}
      - add_ssh_keys:
          fingerprints:
            - "7f:67:75:7f:9c:a6:55:79:1f:19:35:fd:46:75:7e:08"
      - run:
          name: Deploying to GitHub Pages
          command: |
            git config --global user.email "funmoocbot@users.noreply.github.com"
            git config --global user.name "FUN MOOC Bot"
            # Deploy docs with either:
            # - DOCS_VERSION: 1.1 (for git tag v1.1.2)
            # - DOCS_ALIAS: latest
            # or
            # - DOCS_VERSION: dev (for main branch)
            # - No DOCS_ALIAS
            DOCS_VERSION=$([[ -z "$CIRCLE_TAG" ]] && echo "dev" || echo ${CIRCLE_TAG} | sed 's/^v\([0-9]\.[0-9]*\)\..*/\1/')
            DOCS_ALIAS=$([[ -z "$CIRCLE_TAG" ]] && echo "" || echo "latest")
            echo "DOCS_VERSION: ${DOCS_VERSION}"
            echo "DOCS_ALIAS: ${DOCS_ALIAS}"
            # Build docs
            ~/.local/bin/mike deploy ${DOCS_VERSION} ${DOCS_ALIAS}
            # Set default doc to point to
            ~/.local/bin/mike set-default dev
            # Push build docs
            ~/.local/bin/mike deploy --push --update-aliases ${DOCS_VERSION} ${DOCS_ALIAS}

  # ---- Packaging jobs ----
  package-api:
    docker:
      - image: cimg/python:3.12
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-api-dependencies-python:3.12-{{ .Revision }}
      - attach_workspace:
          at: ~/fun
      - run:
          name: Build core python package
          command: python -m build
          working_directory: src/api/core
      - run:
          name: Build plugins python packages
          command: |
            for plugin in *; do \
              cd "${plugin}"; \
              python -m build ; \
              cd ..; \
            done
          working_directory: src/api/plugins
      # Persist build packages to the workspace
      - persist_to_workspace:
          root: ~/fun
          paths:
            - src/api/core/dist
            - src/api/plugins/*/dist
      # Store packages as artifacts to download/test them
      - store_artifacts:
          path: ~/fun/src/api/core/dist

  # Publishing to PyPI requires that:
  #   * you already registered to pypi.org
  #   * you have defined both the TWINE_USERNAME & TWINE_PASSWORD secret
  #     environment variables in CircleCI UI (with your PyPI credentials)
  pypi:
    docker:
      - image: cimg/python:3.12
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      # Restore built python packages
      - attach_workspace:
          at: ~/fun
      - run:
          name: List built packages
          command: |
            ls src/api/core/dist/* ;
            ls src/api/plugins/*/dist/* ;
      - run:
          name: Install base requirements (twine)
          command: pip install --user ./core[ci]
          working_directory: src/api
      - run:
          name: Upload built packages to PyPI
          command: |
            ~/.local/bin/twine upload --skip-existing core/dist/* ;
            ~/.local/bin/twine upload --skip-existing plugins/*/dist/* ;
          working_directory: src/api

  npm:
    docker:
      - image: cimg/node:21.5.0
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      # Restore built frontend packages
      - attach_workspace:
          at: ~/fun
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/fun/.npmrc
      - run:
          name: Init Git identity in order to allow changeset to create tags
          command: |
            git config user.email "funmoocbot@users.noreply.github.com"
            git config user.name "FUN MOOC bot"
      - run:
          name: Publish package as public if package version are bumped
          command: yarn changeset publish
      - run:
          name: Push release tags if some were created
          command: git push --follow-tags origin HEAD


  # ---- DockerHub publication job ----
  hub:
    machine:
      image: ubuntu-2204:2023.07.2
      docker_layer_caching: true
    working_directory: ~/fun
    steps:
      # Checkout repository sources
      - checkout
      # Generate a version.json file describing app release & login to DockerHub
      - *generate-version-file
      - *docker-login
      - run:
          name: Build APP production image
          command: |
            WARREN_APP_IMAGE_BUILD_TARGET=production \
            WARREN_APP_IMAGE_TAG=app-${CIRCLE_SHA1} \
            WARREN_FRONTEND_IMAGE_BUILD_TARGET=production \
              make build-docker-app
      - run:
          name: Build API core production image
          command: |
            WARREN_API_IMAGE_BUILD_TARGET=production-core \
            WARREN_API_IMAGE_TAG=api-core-${CIRCLE_SHA1} \
              make build-docker-api
      - run:
          name: Build API full production image
          command: |
            WARREN_API_IMAGE_BUILD_TARGET=production-full \
            WARREN_API_IMAGE_TAG=api-full-${CIRCLE_SHA1} \
              make build-docker-api
      - run:
          name: Check built image availability
          command: docker images "warren:*"
      # Tag docker images with the same pattern used in Git (Semantic Versioning)
      #
      # Git tag: v1.0.1
      # Docker tag: 1.0.1(-ci)
      - run:
          name: Tag images
          command: |
            docker images fundocker/warren
            DOCKER_TAG=$([[ -z "$CIRCLE_TAG" ]] && echo $CIRCLE_BRANCH || echo ${CIRCLE_TAG} | sed 's/^v//')
            RELEASE_TYPE=$([[ -z "$CIRCLE_TAG" ]] && echo "branch" || echo "tag ")
            # Display either:
            # - DOCKER_TAG: main (Git branch)
            # or
            # - DOCKER_TAG: 1.1.2 (Git tag v1.1.2)
            echo "DOCKER_TAG: ${DOCKER_TAG} (Git ${RELEASE_TYPE}${CIRCLE_TAG})"
            docker tag warren:app-${CIRCLE_SHA1} fundocker/warren:app-${DOCKER_TAG}
            docker tag warren:api-core-${CIRCLE_SHA1} fundocker/warren:api-core-${DOCKER_TAG}
            docker tag warren:api-full-${CIRCLE_SHA1} fundocker/warren:api-full-${DOCKER_TAG}
            if [[ -n "$CIRCLE_TAG" ]]; then
                docker tag warren:app-${CIRCLE_SHA1} fundocker/warren:app-latest
                docker tag warren:api-core-${CIRCLE_SHA1} fundocker/warren:api-core-latest
                docker tag warren:api-full-${CIRCLE_SHA1} fundocker/warren:api-full-latest
            fi
            docker images "fundocker/warren:*"

      # Publish images to DockerHub
      #
      # Nota bene: logged user (see "Login to DockerHub" step) must have write
      # permission for the project's repository; this also implies that the
      # DockerHub repository already exists.
      - run:
          name: Publish images
          command: |
            DOCKER_TAG=$([[ -z "$CIRCLE_TAG" ]] && echo $CIRCLE_BRANCH || echo ${CIRCLE_TAG} | sed 's/^v//')
            RELEASE_TYPE=$([[ -z "$CIRCLE_TAG" ]] && echo "branch" || echo "tag ")
            # Display either:
            # - DOCKER_TAG: main (Git branch)
            # or
            # - DOCKER_TAG: 1.1.2 (Git tag v1.1.2)
            echo "DOCKER_TAG: ${DOCKER_TAG} (Git ${RELEASE_TYPE}${CIRCLE_TAG})"
            docker push fundocker/warren:app-${DOCKER_TAG}
            docker push fundocker/warren:api-core-${DOCKER_TAG}
            docker push fundocker/warren:api-full-${DOCKER_TAG}
            if [[ -n "$CIRCLE_TAG" ]]; then
              docker push fundocker/warren:app-latest
              docker push fundocker/warren:api-core-latest
              docker push fundocker/warren:api-full-latest
            fi

workflows:
  version: 2

  warren:
    jobs:
      # Git jobs
      #
      # Check validity of git history
      - lint-git:
          filters:
            tags:
              only: /.*/
      # Check CHANGELOG update
      - check-changelog:
          filters:
            branches:
              ignore: main
            tags:
              only: /(?!^v).*/
      - lint-changelog:
          filters:
            branches:
              ignore: main
            tags:
              only: /.*/
      # Check Renovate
      - check-renovate-configuration:
          filters:
            tags:
              only: /.*/

      # Docker jobs
      #
      # Build images
      - build-docker-api:
          filters:
            tags:
              only: /.*/
      - build-docker-app:
          filters:
            tags:
              only: /.*/

      # API jobs
      #
      # Build, lint and test production and development Docker images
      # (debian-based)
      - build-api:
          matrix:
            parameters:
              python-image: [python:3.9, python:3.10, python:3.11, python:3.12]
          filters:
            tags:
              only: /.*/
      - lint-api:
          requires:
            - build-api
          filters:
            tags:
              only: /.*/
      - test-api:
          matrix:
            parameters:
              python-image: [python:3.9, python:3.10, python:3.11, python:3.12]
          requires:
            - build-api
          filters:
            tags:
              only: /.*/

      # App jobs
      #
      # Build, lint and test production and development Docker images
      # (debian-based)
      - build-app:
          matrix:
            parameters:
              python-image: [python:3.9, python:3.10, python:3.11, python:3.12]
          filters:
            tags:
              only: /.*/
      - lint-app:
          requires:
            - build-app
          filters:
            tags:
              only: /.*/
      - test-app:
          matrix:
            parameters:
              python-image: [python:3.9, python:3.10, python:3.11, python:3.12]
          requires:
            - build-app
          filters:
            tags:
              only: /.*/

      # Frontend jobs
      #
      # Build, lint and test frontend sources
      - lint-frontend:
          filters:
            tags:
              only: /.*/
      - build-frontend:
          filters:
            tags:
              only: /.*/

      # Docs
      #
      # Test documentation build
      - build-docs:
          filters:
            tags:
              only: /.*/

      # Packaging: python
      #
      # Build the python package
      - package-api:
          requires:
            - lint-api
            - test-api
          filters:
            tags:
              only: /.*/

      # PyPI publication.
      #
      # Publish python package to PYPI only if all build, lint and test jobs
      # succeed and it has been tagged with a tag starting with the letter v
      - pypi:
          requires:
            - package-api
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/

      # NPM publication.
      #
      # Publish frontend packages to NPM only if all build, lint jobs succeed,
      # and it has been tagged with a tag starting with the letter v
      - npm:
          requires:
            - build-frontend
            - lint-frontend
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/


      # DockerHub publication.
      #
      # Publish docker images only if all build, lint and test jobs succeed
      # and it has been tagged with a tag starting with the letter v or is on
      # the main branch
      - hub:
          requires:
            - build-docker-api
            - build-docker-app
          filters:
            branches:
              only: main
            tags:
              only: /^v.*/

      # Publish the documentation website to GitHub Pages.
      # Only do it for master and for tagged stable releases with a tag in the format vX.Y.Z
      - deploy-docs:
          requires:
            - build-docs
            - package-api
            # FIXME
            # - package-app
            # - package-frontend
          filters:
            branches:
              only: main
            tags:
              only: /^v.*/
